{"version":3,"sources":["withDimensions.tsx"],"names":["isOrientationLandscape","width","height","withDimensions","WrappedComponent","EnhancedComponent","props","handleOrientationChange","window","setState","dimensions","isLandscape","Dimensions","get","state","dimensionHandler","addEventListener","remove","React","Component","displayName"],"mappings":"g1BAAA,oDACA,yCACA,qF,kFAYO,GAAMA,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,UAAGC,CAAAA,KAAH,MAAGA,KAAH,CAAUC,MAAV,MAAUA,MAAV,OACpCD,CAAAA,KAAK,CAAGC,MAD4B,EAA/B,C,sDAGQ,QAASC,CAAAA,cAAT,CACbC,gBADa,CAEgE,IACvEC,CAAAA,iBADuE,uFAI3E,2BAAYC,KAAZ,CAA0B,gEACxB,6GAAMA,KAAN,GADwB,MAsB1BC,uBAtB0B,CAsBA,eAAwC,IAArCC,CAAAA,MAAqC,OAArCA,MAAqC,IACxDP,CAAAA,KADwD,CACtCO,MADsC,CACxDP,KADwD,CACjDC,MADiD,CACtCM,MADsC,CACjDN,MADiD,CAEhE,MAAKO,QAAL,CAAc,CACZC,UAAU,CAAE,CAAET,KAAK,CAALA,KAAF,CAASC,MAAM,CAANA,MAAT,CADA,CAEZS,WAAW,CAAEX,sBAAsB,CAAC,CAAEC,KAAK,CAALA,KAAF,CAASC,MAAM,CAANA,MAAT,CAAD,CAFvB,CAAd,EAID,CA5ByB,qBAGEU,wBAAWC,GAAX,CAAe,QAAf,CAHF,CAGhBZ,MAHgB,iBAGhBA,KAHgB,CAGTC,OAHS,iBAGTA,MAHS,CAIxB,MAAKY,KAAL,CAAa,CACXJ,UAAU,CAAE,CAAET,KAAK,CAALA,MAAF,CAASC,MAAM,CAANA,OAAT,CADD,CAEXS,WAAW,CAAEX,sBAAsB,CAAC,CAAEC,KAAK,CAALA,MAAF,CAASC,MAAM,CAANA,OAAT,CAAD,CAFxB,CAAb,CAJwB,aAQzB,CAZ0E,wGAcvD,CAClB,KAAKa,gBAAL,CAAwBH,wBAAWI,gBAAX,CACtB,QADsB,CAEtB,KAAKT,uBAFiB,CAAxB,CAID,CAnB0E,mEAqBpD,CACrB,KAAKQ,gBAAL,CAAsBE,MAAtB,GACD,CAvB0E,uCAkClE,CAEP,MAAO,qBAAC,gBAAD,0BAAsB,KAAKX,KAA3B,CAAsC,KAAKQ,KAA3C,mDAAP,CACD,CArC0E,+BAC7CI,KAAK,CAACC,SADuC,EACvEd,iBADuE,CAEpEe,WAFoE,mBAEpChB,gBAAgB,CAACgB,WAFmB,KAyC7E,MAAO,kCAAoBf,iBAApB,CAAuCD,gBAAvC,CAAP,CACD","sourcesContent":["import * as React from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\ntype DimensionsType = {\n  width: number;\n  height: number;\n};\n\ntype InjectedProps = {\n  dimensions: DimensionsType;\n  isLandscape: boolean;\n};\n\nexport const isOrientationLandscape = ({ width, height }: DimensionsType) =>\n  width > height;\n\nexport default function withDimensions<Props extends InjectedProps>(\n  WrappedComponent: React.ComponentType<Props>\n): React.ComponentType<Pick<Props, Exclude<keyof Props, keyof InjectedProps>>> {\n  class EnhancedComponent extends React.Component {\n    static displayName = `withDimensions(${WrappedComponent.displayName})`;\n\n    constructor(props: Props) {\n      super(props);\n\n      const { width, height } = Dimensions.get('window');\n      this.state = {\n        dimensions: { width, height },\n        isLandscape: isOrientationLandscape({ width, height }),\n      };\n    }\n\n    componentDidMount() {\n      this.dimensionHandler = Dimensions.addEventListener(\n        'change',\n        this.handleOrientationChange\n      );\n    }\n\n    componentWillUnmount() {\n      this.dimensionHandler.remove();\n    }\n    dimensionHandler: any;\n\n    handleOrientationChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n      this.setState({\n        dimensions: { width, height },\n        isLandscape: isOrientationLandscape({ width, height }),\n      });\n    };\n\n    render() {\n      // @ts-ignore\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  // @ts-ignore\n  return hoistNonReactStatic(EnhancedComponent, WrappedComponent);\n}\n"]}